#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const { exec } = require('child_process');
const path = require('path');
const ejs = require('ejs');

const args = process.argv;
const templatePath = path.resolve('./build/template')
const viewsPath = path.resolve('./client/skins'); // 视图目录
const serverSidePath = path.resolve('./server/routers'); // 控制器目录

var getCmd = (moduleName) => { // 处理深层级的模块
    const arr = moduleName.split('/');
    const str = [];
    arr.forEach((item) => {
        str.push(`mkdir ${item} && cd ${item}`);
    })

    return {
        cmd: str.join(' && '),
        relativePath: arr.map(() => '../').join('') 
    }
}

program
    .version('1.0.0')
    .option('-n, --module <nameValue>', '要生成的模块名称', value => value)
    .option('-p, --path <pathValue>', '要生成的路由地址', value => value)
    .parse(process.argv);

    const urlPath = program.path;
    const moduleName = program.module;

    if (typeof urlPath === 'undefined') {
        console.error('请输入要生成的模块名称');
        process.exit(0);
    }

    if (typeof moduleName === 'undefined') {
        console.error('请输入要生成的路由地址');
        process.exit(0);
    }

    const cmdObj = getCmd(moduleName);

    console.log('generating views...');
    exec(`cd ${viewsPath} && ${cmdObj.cmd} && cp -rf ${templatePath}/viewTemplate/* ${viewsPath}/${moduleName}`, (err) => {
        if(err) {
            throw Error(err);
        }

        console.log('views generated!');
    });

    console.log('generating routers...');
    
    exec(`cd ${serverSidePath} && ${cmdObj.cmd}`, (err) => {
        if (err) {
            throw Error(err);
        }

        const tplString = fs.readFileSync(`${templatePath}/routerTemplate/index.js.template`).toString();
        // console.log(tplString);

        fs.writeFileSync(`${serverSidePath}/${moduleName}/index.js`, ejs.render(tplString, {data: { moduleName, urlPath }}));

        console.log('routers generated!');
    });